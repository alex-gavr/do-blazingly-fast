---
import '@styles/global.css';
import AutoExit from '@monetization/Autoexit';
import InitPush from '@monetization/InitPush';
import Reverse from '@monetization/Reverse';
import production from '@utils/simpleFunctions/isProduction';
import NonUnique from '@monetization/NonUnique';
import { getDictionary } from '@i18n/getDictionary';
import makeCommentsForFinanceSurvey from '@config/FinanceComments';
import type { TFinanceDictionary } from '@i18n/2025/en';
import { financeSurveyFullConfig } from '@i18n/FinanceSurveyFullConfig';
import { rewardisExitsState } from '@context/state';
// import { getSurveyDataTexts } from '@utils/getSurveyDataTexts';
// import fs from 'fs';
// import path, { dirname, join } from 'path';
// import { fileURLToPath } from 'url';
// import { financeZones } from '@i18n/FinanceSurveyZones';

export interface Props {
  title: string;
}

const { title } = Astro.props;

const d = (await getDictionary(0, 'en')) as TFinanceDictionary;

// const zones = financeSurveyFullConfig.zones;
const zonesRewardis = rewardisExitsState.get();

// const surveyData = getSurveyDataTexts(d.MainSection.SurveyTexts, 0);

// const mainSection = d.MainSection;

// const fullConfig = {
//   Zones: financeZones,
//   MainSection: {
//     ...d.MainSection,
//     SurveyTexts: surveyData,
//   },
//   CommentSection: {
//     ...d.CommentSection,
//     Comments: makeCommentsForFinanceSurvey(d.CommentSection.Comments),
//   },
//   Assessment: d.Assessment,
//   Offer: d.Offer,
// };

// const __filename = fileURLToPath(import.meta.url);
// const __dirname = dirname(__filename);

// const filePath = join(__dirname, '..', 'i18n', 'FinanceSurveyFullConfig.ts');
// fs.writeFileSync(filePath, `export const financeSurveyFullConfig = ${JSON.stringify(fullConfig)}`);
---

<!doctype html>
<html lang='en'>
  <head>
    <meta charset='UTF-8' />
    <meta name='description' content='Astro description' />
    <meta name='viewport' content='width=device-width, initial-scale=1' />
    <link rel='icon' type='image/svg+xml' href='/favicon.svg' />
    <meta name='generator' content={Astro.generator} />
    <title>{title}</title>
    <script src='@utils/ErrorFallback.ts'></script>
    <script src='@fraudPrevention/areCookiesEnabled.ts'></script>
  </head>
  <body id='body'>
    <main class='flex flex-col justify-center items-center min-h-screen overflow-hidden'>
      <slot />
    </main>
    <Reverse zone={zonesRewardis.reverse} client:only='preact' />
    <NonUnique
      zone={zonesRewardis.nonUnique.ipp.currentTab}
      zonePops={zonesRewardis.nonUnique.ipp.currentTab}
      zoneTeen={zonesRewardis.nonUnique.teen.ipp.currentTab}
      zoneTeenPops={zonesRewardis.nonUnique.teen.ipp.currentTab}
      client:only='preact'
    />
    <AutoExit
      zoneFirstStep={zonesRewardis.autoexit.autoexitBeginning.onclick.newTab}
      zoneFirstStepPops={zonesRewardis.autoexit.autoexitBeginning.onclick.currentTab}
      zoneLastStep={zonesRewardis.autoexit.autoexitFinal.onclick.newTab}
      zoneLastStepPops={zonesRewardis.autoexit.autoexitFinal.onclick.currentTab}
      zoneMiddleSteps={zonesRewardis.autoexit.autoexitStep.onclick.newTab}
      zoneMiddleStepsPops={zonesRewardis.autoexit.autoexitStep.onclick.currentTab}
      client:only='preact'
    />
    <InitPush zone={zonesRewardis.push.zone} client:only='preact' />
  </body>
</html>

<script>
  import { replaceMacrosWithEmptyString } from '@utils/replaceMacros';

  if (typeof window !== 'undefined') {
    replaceMacrosWithEmptyString(window.location.href);
  }
</script>

<!-- <script>
  if (typeof window !== 'undefined') {
    if (!sessionStorage.getItem('surveyStartTime')) {
      sessionStorage.setItem('surveyStartTime', Date.now().toString());
    }
  }
</script> -->

<script>
  import { rewardisUrlState } from '@context/state';
  import { useClientSearchParams } from '@hooks/useClientSearchParams';
  export interface IRewardisUrlParams {
    sub_id1: string; // zone
    sub_id2: string; // request_var
    sub_id3: string; // ymid
    sub_id4: string; // var_3
    sub_id5: string; // click_id
    abtest?: string; // ab2r
  }

  if (typeof window !== 'undefined') {
    const { zone, requestVar, var3, ymid, subId, abTest } = useClientSearchParams();

    const updatedRewardisUrl = new URL(import.meta.env.PUBLIC_REWARDIS_URL);
    const searchParams = updatedRewardisUrl.searchParams;
    searchParams.set('sub_id1', zone);
    searchParams.set('sub_id2', requestVar);
    searchParams.set('sub_id3', ymid);
    searchParams.set('sub_id4', var3);
    searchParams.set('sub_id5', subId);
    searchParams.set('ab2r', abTest);

    rewardisUrlState.set(updatedRewardisUrl.href);
  }
</script>
