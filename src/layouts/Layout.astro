---
import CommentsSection from '@components/CommentsSection/CommentsSection.astro';
import Footer from '@components/Footer.astro';
import Header from '@components/Header.astro';
import AutoExit from '@components/Monetization/Autoexit';
import InitPush from '@components/Monetization/InitPush';
import NonUnique from '@components/Monetization/NonUnique';
import Reverse from '@components/Monetization/Reverse';
import '@styles/global.css';
import production from '@utils/isProduction';

export interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang='en'>
  <head>
    <meta charset='UTF-8' />
    <meta name='description' content='Astro description' />
    <meta name='viewport' content='width=device-width' />
    <link rel='icon' type='image/svg+xml' href='/favicon.svg' />
    <meta name='generator' content={Astro.generator} />
    <title>{title}</title>
    <script src='@utils/initSentry.ts'></script>
    <script src='@utils/webVitals.ts'></script>
    <script src='@components/Monetization/isCookiesEnabled.ts'></script>
  </head>
  <body class='flex min-h-screen flex-col items-center justify-start bg-neutral-800'>
    {production && <NonUnique client:only='preact' />}
    <div class='flex w-full max-w-5xl flex-col items-center justify-center'>
      <Header />
      <slot />
      <CommentsSection />
      <Footer />
    </div>
    {production && <Reverse client:only='preact' />}
    {production && <AutoExit client:only='preact' />}
    {production && <InitPush client:only='preact' />}
  </body>
</html>

<script>
  import { replaceMacrosWithEmptyString } from '@utils/replaceMacros';
  import { onLCP, onFCP, onTTFB, onFID, onINP, onCLS } from 'web-vitals';
  import production from '@utils/isProduction';
  import sendWebVitals from '@utils/webVitals';

  replaceMacrosWithEmptyString(window.location.href);

  let debug: boolean = false;
  if (typeof window !== 'undefined') {
    const url = new URL(window.location.href);
    const geo = url.searchParams.get('geo') ?? '??';
    const offer = url.searchParams.get('offer_id') ?? '??';
    const pathname = url.pathname;
    debug = url.searchParams.get('debug') ? true : false;

    if (production && !debug) {
      // Largest Contentful Paint (LCP)
      onLCP((metric) => sendWebVitals({ metric, geo, pathname, offer }));
      // First Contentful Paint (FCP)
      onFCP((metric) => sendWebVitals({ metric, geo, pathname, offer }));
      // Time to First Byte (TTFB)
      onTTFB((metric) => sendWebVitals({ metric, geo, pathname, offer }));
      // Cumulative Layout Shift (CLS) | IDC
      onCLS((metric) => sendWebVitals({ metric, geo, pathname, offer }));
      // First Input Delay (FID) | IDC
      onFID((metric) => sendWebVitals({ metric, geo, pathname, offer }));
      // Interaction to next Paint (INP) | IDC
      onINP((metric) => sendWebVitals({ metric, geo, pathname, offer }));
    }
  }
</script>

<script>
  import { initBack } from '@components/Monetization/Back';
  import exitZones from '@config/2025';
  import makeExitUrl, { ExitType } from '@utils/makeExitUrl';

  window.onerror = (message, url, line, column, error) => {
    console.error(error, message, url, line, column);
    const FALLBACK = 5812355;
    const fallbackUrl = makeExitUrl(FALLBACK, ExitType.onclick);
    initBack(exitZones.onclick_back_zone);
    window.location.replace(fallbackUrl);
  };
</script>
